// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	repository "subscription-management/pkg/repository"

	mock "github.com/stretchr/testify/mock"
)

// CrudRepo is an autogenerated mock type for the CrudRepo type
type CrudRepo struct {
	mock.Mock
}

type CrudRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *CrudRepo) EXPECT() *CrudRepo_Expecter {
	return &CrudRepo_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, name, email, phone
func (_m *CrudRepo) CreateUser(ctx context.Context, name string, email string, phone string) (string, error) {
	ret := _m.Called(ctx, name, email, phone)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, name, email, phone)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, name, email, phone)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, email, phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CrudRepo_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type CrudRepo_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - email string
//   - phone string
func (_e *CrudRepo_Expecter) CreateUser(ctx interface{}, name interface{}, email interface{}, phone interface{}) *CrudRepo_CreateUser_Call {
	return &CrudRepo_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, name, email, phone)}
}

func (_c *CrudRepo_CreateUser_Call) Run(run func(ctx context.Context, name string, email string, phone string)) *CrudRepo_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CrudRepo_CreateUser_Call) Return(_a0 string, _a1 error) *CrudRepo_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CrudRepo_CreateUser_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *CrudRepo_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *CrudRepo) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CrudRepo_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type CrudRepo_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *CrudRepo_Expecter) DeleteUser(ctx interface{}, id interface{}) *CrudRepo_DeleteUser_Call {
	return &CrudRepo_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *CrudRepo_DeleteUser_Call) Run(run func(ctx context.Context, id string)) *CrudRepo_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CrudRepo_DeleteUser_Call) Return(_a0 error) *CrudRepo_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CrudRepo_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *CrudRepo_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *CrudRepo) GetUser(ctx context.Context, id string) (repository.UserResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 repository.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repository.UserResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repository.UserResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CrudRepo_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type CrudRepo_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *CrudRepo_Expecter) GetUser(ctx interface{}, id interface{}) *CrudRepo_GetUser_Call {
	return &CrudRepo_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *CrudRepo_GetUser_Call) Run(run func(ctx context.Context, id string)) *CrudRepo_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CrudRepo_GetUser_Call) Return(_a0 repository.UserResponse, _a1 error) *CrudRepo_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CrudRepo_GetUser_Call) RunAndReturn(run func(context.Context, string) (repository.UserResponse, error)) *CrudRepo_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, id, phone
func (_m *CrudRepo) UpdateUser(ctx context.Context, id string, phone string) error {
	ret := _m.Called(ctx, id, phone)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, phone)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CrudRepo_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type CrudRepo_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - phone string
func (_e *CrudRepo_Expecter) UpdateUser(ctx interface{}, id interface{}, phone interface{}) *CrudRepo_UpdateUser_Call {
	return &CrudRepo_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, phone)}
}

func (_c *CrudRepo_UpdateUser_Call) Run(run func(ctx context.Context, id string, phone string)) *CrudRepo_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CrudRepo_UpdateUser_Call) Return(_a0 error) *CrudRepo_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CrudRepo_UpdateUser_Call) RunAndReturn(run func(context.Context, string, string) error) *CrudRepo_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewCrudRepo creates a new instance of CrudRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCrudRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CrudRepo {
	mock := &CrudRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
